# #############################################################################
# Copyright (c) 2023,2024 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Apache License, Version 2.0 which is available at
# https://www.apache.org/licenses/LICENSE-2.0.
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# SPDX-License-Identifier: Apache-2.0
# #############################################################################
---
portal:
  enabled: true
  replicaCount: 1

centralidp:
  enabled: true
  keycloak:
    nameOverride: "centralidp"
    replicaCount: 1
    resources:
      limits:
        cpu: 2000m
        memory: 1Gi
    livenessProbe:
      initialDelaySeconds: 200
      failureThreshold: 20
    readinessProbe:
      initialDelaySeconds: 200
      failureThreshold: 20
    postgresql:
      nameOverride: "centralidp-postgresql"
      architecture: standalone

sharedidp:
  enabled: true
  keycloak:
    nameOverride: "sharedidp"
    replicaCount: 1
    resources:
      limits:
        cpu: 2000m
        memory: 1Gi
    livenessProbe:
      initialDelaySeconds: 200
      failureThreshold: 20
    readinessProbe:
      initialDelaySeconds: 200
      failureThreshold: 20
    postgresql:
      nameOverride: "sharedidp-postgresql"
      architecture: standalone

bpndiscovery:
  enabled: true
  enablePostgres: true
  bpndiscovery:
    authentication: false
    bpndiscoverEndpoint:
      allowedTypes: oen,wmi,passtype,manufacturerPartId
      description: Service to discover BPN for different kind of type numbers
      endpointAddress: /bpndiscovery
      documentation: /bpndiscovery/swagger-ui/index.html
      timeToLive: "31536000"
    livenessProbe:
      initialDelaySeconds: 200
    readinessProbe:
      initialDelaySeconds: 200
  postgresql:
    nameOverride: "bpndiscovery-postgresql"

discoveryfinder:
  enabled: true
  enablePostgres: true
  discoveryfinder:
    authentication: false
    livenessProbe:
      initialDelaySeconds: 200
    readinessProbe:
      initialDelaySeconds: 200
  postgresql:
    nameOverride: "discoveryfinder-postgresql"

sdfactory:
  enabled: true
  secret:
    # -- JWK Set URI
    jwkSetUri: "https://centralidp.example.org/auth/realms/CX-Central/protocol/openid-connect/certs"
    # -- Custodian wallet client id
    clientId: ""
    # -- Custodian wallet client secret
    clientSecret: ""
    # -- Keycloak URL
    authServerUrl: "https://centralidp.example.org/auth"
    # -- Keycloak Realm detail
    realm: ""
    # -- Keycloak Resource detail
    resource: ""
    # -- Details for Custodian wallet URI
    custodianWalletUri: ""
    # -- Details for Clearing House URI
    clearingHouseUri: ""
    # -- Details for Clearing House URL
    clearingHouseServerUrl: ""
    # -- Details for Clearing House Realm
    clearingHouseRealm: ""
    # -- Details for Clearing House Client ID
    clearingHouseClientId: ""
    # -- Details for Clearing House Client Secret
    clearingHouseClientSecret: ""

vault:
  enabled: true
  token: &vault-token root
  url: http://{{ .Release.Name }}-vault:8200
  secrets:
    # TODO add test secret or secret reference. Can this be generated?
    edc-test-miw-keycloak-secret: miw_private_client
    # TODO add certificate or secret reference. Can Key Pairs be generated?
    tokenSignerPublicKey: >-
      -----BEGIN CERTIFICATE-----\n
      test\n
      -----END CERTIFICATE-----
    # TODO add certificate or secret reference. Can Key Pairs be generated?
    tokenSignerPrivateKey: >-
      -----BEGIN PRIVATE KEY-----\n
      test\n
      -----END PRIVATE KEY-----
    # TODO add test secret or secret reference. Can this be generated?
    tokenEncryptionAesKey: test
  injector:
    enabled: false
  server:
    dev:
      enabled: true
      devRootToken: *vault-token
    ingress:
      enabled: false

managed-identity-wallet:
  enabled: true
  nameOverride: miw
  fullnameOverride: miw
  miw:
    authorityWallet:
      bpn: &authority-bpn "BPNL000000000000"
    database:
      host: "{{ .Release.Name }}-miw-postgres"
      secret: "{{ .Release.Name }}-miw-postgres"
    keycloak:
      url: "https://centralidp.example.org"  # TODO connect to central idp
      clientId: &miw_client miw_private_client
  postgresql:
    nameOverride: miw-postgres
    primary:
      persistence:
        enabled: false
        size: 1Gi
  keycloak:
    enabled: false
  livenessProbe:
    initialDelaySeconds: 120
    failureThreshold: 10
    periodSeconds: 10
  readinessProbe:
    initialDelaySeconds: 120
    failureThreshold: 10
    periodSeconds: 10
